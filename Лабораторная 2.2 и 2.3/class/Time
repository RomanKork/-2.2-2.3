class Time
{
    private byte hours;
    private byte minutes;

    public byte hourscorrect
    {
        get => hours;
        set
        {
            if (value <= 23 && value >= 0)
                hours = value;
            else
                throw new ArgumentOutOfRangeException("Диапазон часов должен находиться от 0 до 23 включительно");
        }
    }

    public byte minutescorrect
    {
        get => minutes;
        set
        {
            if (value <= 59 && value >= 0)
                minutes = value;
            else
                throw new ArgumentOutOfRangeException("Диапазон минут должен находиться от 0 до 59 включительно");
        }
    }

    public Time()
    {
        hourscorrect = 0;
        minutescorrect = 0;
    }

    public Time(byte hours, byte minutes)
    {
        hourscorrect = hours;
        minutescorrect = minutes;
    }

    public override string ToString()
    {
        return $"Время {hourscorrect:D2}:{minutescorrect:D2}";
    }
    public Time calculate(uint time1)
    {
        int allminut = hourscorrect * 60 + minutescorrect - (int)time1;
        while (allminut < 0)
            allminut += 1440;
        byte hours1 = (byte)(allminut / 60);
        byte minutes1 = (byte)(allminut % 60);
        return new Time(hours1, minutes1);
    }
    public static Time operator -(Time time)
    {
        return new Time(0, 0);
    }

    public static Time operator --(Time time)
    {
        return new Time(time.hourscorrect, 0);
    }

    public static implicit operator byte(Time time)
    {
        return time.hourscorrect;
    }

    public static explicit operator bool(Time time)
    {
        return time.hourscorrect != 0 || time.minutescorrect != 0;
    }

    public static bool operator ==(Time t1, Time t2)
    {
        return t1.hourscorrect == t2.hourscorrect && t1.minutescorrect == t2.minutescorrect;
    }

    public static bool operator !=(Time t1, Time t2)
    {
        return !(t1 == t2);
    }
    public override bool Equals(object obj)
    {
        if (obj is Time time)
        {
            return this == time;
        }
        return false;
    }
    public override int GetHashCode()
    {
        return hourscorrect.GetHashCode() ^ minutescorrect.GetHashCode();
    }
}
